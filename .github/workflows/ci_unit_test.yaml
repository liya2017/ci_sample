name: ci_unit_tests
on:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
    branches:
      - master
      - develop
      - trying
      - staging
      - 'rc/*'


env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUSTFLAGS: -D warnings
  COMMIT_MESSAGE: ${{github.event.head_commit.message}}
  REPO_ACTOR: ${{github.actor}}
  CI_RUNS_ON: ${{secrets.CI_RUNS_ON}}
  REPO_OWNER: ${{github.repository_owner}}
  EVENT_NAME: ${{github.event_name}}
  REPOSITPRY: ${{ github.repository }}
  TOKEN: ${{secrets.WORKFLOW_TOKEN}}
  COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
  workspace: ${{ github.workspace }}
jobs:
  prologue:
    name: prologue
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - name: set-output
        id: set-matrix 
        run: |
          runs_on=`${{github.workspace}}/devtools/ci/ci_prologue.sh`
          echo $runs_on
          echo "::set-output name=matrix::{\"os\":$runs_on}"
  ci_unit_tests:
    name: ci_unit_tests
    needs: prologue
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{fromJSON(needs.prologue.outputs.matrix)}} 
    steps:
    - uses: actions/checkout@v2
    - run: echo  ${{fromJSON(needs.prologue.outputs.matrix)}}
    - run: |
        ls ${{github.workspace}}/devtools/ci
        ${{github.workspace}}/devtools/ci/ci_main.sh
    - name: install python requirements
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - run: |
        pip install requests
        pip install datetime
        pip install python-dotenv
        pip install PyGithub
    - name: ci_epilogue
      id: ci_epilogue
      run: |
        python3 ${{ github.workspace }}/devtools/ci/ci_epilogue.py > result.log
        cat result.log
        # CI_conclusion=`cat result.log | grep "CI_conclusion" | awk -F ':' '{print $2}'`
        # echo "::set-output name=CI_conclusion::${CI_conclusion}"
    # - uses: actions/github-script@v4
    #   if: ${{ steps.ci_epilogue.outputs.CI_conclusion != '' }}
    #   with:
    #     github-token: ${{secrets.WORKFLOW_TOKEN}}
    #     script: |
    #       github.repos.createCommitStatus({
    #           state: '${{ steps.ci_epilogue.outputs.CI_conclusion }}',
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           context: '${{ github.workflow }}',
    #           sha: '${{ github.event.pull_request.head.sha }}',
    #           target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
    #       })

        

